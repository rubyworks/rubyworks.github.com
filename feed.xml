<html>

<head>
  <title>Ruby Works</title>

  <link REL="SHORTCUT ICON" HREF="/assets/images/ruby_1.jpg" />
  <link REL="styleSheet" href="/assets/style.css" TYPE="text/css" MEDIA="screen"/>

  <script type="text/javascript" src="/assets/jquery.js"></script>
  <script type="text/javascript" src="/assets/rubyworks.js"></script>

  <!-- flattr -->
  <script type="text/javascript">
  /* <![CDATA[ */
      (function() {
          var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];
          s.type = 'text/javascript';
          s.async = true;
          s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';
          t.parentNode.insertBefore(s, t);
      })();
  /* ]]> */
  </script>
</head>

<body>

<div style="margin: 0 auto; width: 960px;">

<!-- Title -->
<div class="nav">

  <table width="100%">
  <tr>
  <td class="nav-menu">
    <a href="/index.html">Blog.read</a>
    <a href="/projects.html">Project.list</a>
    <a href="/rubynew.html">Ruby.new</a>
    <a href="http://github.com/rubyworks/">GitHub.com</a>
  </td>
  <td class="search-box">
    <FORM method="GET" action="http://www.google.com/group/ruby-talk-google/search?hl=en" target="_blank">
    <!-- Search Google -->
    <input type="text" name="q" size="25" maxlength="255" value="" class="search-input" />
    <input type="hidden" name="hl" value="en" />
    <input type="hidden" name="group" value="ruby-talk-google" />
    <input type="submit" name="qt_g" VALUE="Search Ruby-Talk" />
    <!-- Search Google -->
    </FORM>
  </td>
  </tr>
  </table>

  <div style="float: right; padding-top: 30px; padding-left: 10px;">
    <a class="FlattrButton" style="display:none;" href="http://rubyworks.github.com"></a>
    <noscript>
      <a href="http://flattr.com/thing/324911/Rubyworks-Ruby-Development-Fund" target="_blank">
        <img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" />
      </a>
    </noscript>
  </div>

  <div style="float: right; padding-top: 40px;">
  <a href='http://www.pledgie.com/campaigns/15553'>
    <img alt='Click here to lend your support to: Rubyworks Ruby Development Fund and make a donation at www.pledgie.com !'
         src='http://www.pledgie.com/campaigns/15553.png?skin_name=chrome' border='0' />
  </a>
  </div>

</div>

<div style="padding: 50px; background: white; box-shadow: 10px 10px 5px #511; -moz-box-shadow: 10px 10px 5px #511;">


<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>RubyWorks Blog</title>
 <link href="http://rubyworks.github.com/atom.xml" rel="self"/>
 <link href="http://rubyworks.github.com/"/>
 <updated></updated>
 <id>http://rubyworks.github.com/</id>

 
 <entry>
   <title>ANSI 1.3.0</title>
   <link href="http://rubyworks.github.com2011-07-14-ansi_1.3.0/index.html"/>
   <updated>2011-06-30</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>ANSI 1.3.0 has been release. If you are not familiar with ANSI,
it is a collection of ANSI escape code related libraries enabling
ANSI code based colorization and stylization of output on TTY
consoles.</p>

     <p><a href="http://rubyworks.github.com2011-07-14-ansi_1.3.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>Hashery and Mixers</title>
   <link href="http://rubyworks.github.com2010-05-08-hashery_and_mixers/index.html"/>
   <updated>2010-05-08</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>Perhaps you've already heard that Ruby Facets is filtering it's arsenal
of code to provide ONLY core and standard library extension methods.
This means a number of classes and modules that remained in Ruby Facets
after the last "<i>MORE library clean-up</i>" have to move out. The question
is, where to?</p>

<p>Somewhat surprisingly, much of the remaining MORE library's classes and
modules fall into two categories, and based on this have found their way
into two new spin-off projects: The <a href="http://rubyworks.github.com/hashery">Ruby Hashery</a>
and <a href="http://rubyworks.github.com/mixers">Ruby Mixers</a>.
In both projects are found a small collection of nicely related libraries.
In Hashery, it is a collection of Hash-like classes. While in Mixers, it
is a collection of mixin modules. Be sure to check them out. If you were
using any of these libraries before, now you know where to find them
when Facets 3.0 comes out.</p>

     <p><a href="http://rubyworks.github.com2010-05-08-hashery_and_mixers/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>String::Mask 0.3.0</title>
   <link href="http://rubyworks.github.com2010-04-18-strmask_0.3.0/index.html"/>
   <updated>2010-04-18</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>String::Mask provides a tool for manipulating strings
in a logicomathematical manner (e.g. add, subtract, xor)
using <i>masks</i>. This new release simply changes #to_s
and #inspect to return strings with the mask character
re-inserted. Here are some examples.</p>

     <p><a href="http://rubyworks.github.com2010-04-18-strmask_0.3.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>Is OpenHash a Bad Idea?</title>
   <link href="http://rubyworks.github.com2010-04-14-open_hash/index.html"/>
   <updated>2010-04-14</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>A long time ago, in an now long forgotten ruby-talk thread, a poster
asked, "what's all the fuss over these open classes? If you
really need something like that just open up a Hash and add method_missing",
or something to that effect. It seemed a reasonable comment. And for some
time after I thought the poster made a good point: for simple needs
an "OpenHash" is a good light-weight solution, useful to many cases.
The basic implementation of an OpenHash is as follows.</p>

     <p><a href="http://rubyworks.github.com2010-04-14-open_hash/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>Paramix 2.0.0</title>
   <link href="http://rubyworks.github.com2010-04-06-paramix_2.0.0/index.html"/>
   <updated>2010-04-06</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>Thanks to a conversation with Jonathan Rochkind,
<a href="http://rubyworks.github.com/anise">Paramix</a>
has been completely rewritten.  Whereas anonymous modules
were avoided in prior versions, it has become clear that
the worries of memory consumption that would accompany them
were largely unfounded. The new code is refreshingly concise,
and the design fully comforms to POLS.</p>

     <p><a href="http://rubyworks.github.com2010-04-06-paramix_2.0.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>VanUnits 1.0.0</title>
   <link href="http://rubyworks.github.com2010-02-22-vanunits_1.0.0/index.html"/>
   <updated>2010-02-22</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>VanUnits is the SI units system originally underpinning Stick.
Stick has implemented a new <i>experimental</i> unit system,
so the prior system, which remains a very competent and useful
system, is being spun-off as VanUnits, named after the primary
designer Peter Vanbroekhoven.</p>

<p>The components included are the base unit system, the
currency system (which needs an online backend to function),
and a set of scientific constants utilizing the units.</p>

     <p><a href="http://rubyworks.github.com2010-02-22-vanunits_1.0.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>TracePoint 1.1.0</title>
   <link href="http://rubyworks.github.com2009-12-26-tracepoint_1.1.0/index.html"/>
   <updated>2009-12-26</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p><a href="http://rubyworks.github.com/tracepoint">TracePoint</a>
is a Binding with the addition of event information. In theory
it would function very well as the join-point for AOP. In practice
it provides a much better approach to #set_trace_func. This release
(finally!) adds multi-tracing and named traces.</p>

     <p><a href="http://rubyworks.github.com2009-12-26-tracepoint_1.1.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>XDG 1.0.0</title>
   <link href="http://rubyworks.github.com2009-12-01-xdg_1.0.0/index.html"/>
   <updated>2009-12-01</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>This is a major re-implementation of the <a href="http://rubyworks.github.com/xdg">XDG</a>
API to be more flexible and object-oriented. Instead of a single module with every
needed method, the system is divided up into sub-modules, one for each set of XDG
locations. So, for example, instead of "XDG.data_dirs" you use "XDG::Data.dirs"
or "XDG.data.dirs".</p>

<p>Would love to get feedback on this project, especially suggestions on how it can be
enhanced to support more aspects of XDG standards.</p>

     <p><a href="http://rubyworks.github.com2009-12-01-xdg_1.0.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>The Facetnating Functor</title>
   <link href="http://rubyworks.github.com2009-09-30-functor/index.html"/>
   <updated>2009-09-30</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>In Ruby 1.9, Enumerable methods return an Enumerator when no block is provided them.
This makes it very convenient to chain methods in what is often called <em>fluid notation</em>.
For example, rather than the usual <code>#each_with_index</code>, one can use:</p>

     <p><a href="http://rubyworks.github.com2009-09-30-functor/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>RubyWorks::Website.new</title>
   <link href="http://rubyworks.github.com2009-08-24-new_website/index.html"/>
   <updated>2009-08-24</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>Recently I set out to migrate most of my work from Rubyforge to GitHub, in so doing I needed a umbrella account to place all these
wonderfully chewy morsals. In deliberating a name for the account I recollected the very first Ruby website I had ever created back
in 2002. It was called Ruby Works and hosted at http://transami.net/ruby. It has long been defunct, but it seems fitting to bring my
waining Ruby career to a conclusion by coming full circle. And so Ruby Works was reborn.</p>

<p>In the process of this migration I made myself this nifty new blog built with <a href="http://proutils.github.com/brite">Brite</a>, my home grown
static website and weblog construction kit.</p>

<p>In any case, this website is dedicated to the many awesome Ruby projects I've had the privilege to develop and maintain over the years.
Combined with <a href="http://proutils.github.com">ProUtils</a> these cover my complete works in the Rubydom. Most of the projects are in good
working order. In fact, I've only let a couple non-useable projects into the collection, in their case because I would like to get
them working soon. All the rest good to go, some in relatviely perfect order, others still a little rough around the edges, but
still usable.</p>

<p>As time wears on I'll blog about these various projects here (now that I have this spiffy new blog). If you would like to discuss any
of these projects please hop over the the <a href="http://googlegroups.com/group/rubyworks-mailinglist">Google Group</a>. I setup the group
just for that purpose.</p>

     <p><a href="http://rubyworks.github.com2009-08-24-new_website/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>Anise 0.4.0</title>
   <link href="http://rubyworks.github.com2009-05-28-anise_0.4.0/index.html"/>
   <updated>2009-05-28</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>New release of <a href="http://rubyworks.github.com/anise">Anise</a>
adds a callback method #annotation_added. It is a striaght-forward callback
method patterned after Ruby's other built-in callbacks. The callback
can be used to allow for the creation of "<i>active</i>" annotations.</p>

     <p><a href="http://rubyworks.github.com2009-05-28-anise_0.4.0/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 
 <entry>
   <title>Facets Hash#rekey</title>
   <link href="http://rubyworks.github.com2008-11-23-hash_rekey/index.html"/>
   <updated>2008-11-23</updated>
   <id>http://rubyworks.github.com</id>
   <content type="html"><p>This is the first in a series of posts in which I plan to introduce my fellow Rubyists to the plethora or goodness that is <a href="http://facets.rubyforge.org">Ruby Facets</a>.</p>

<p>Ruby Facets has been in development for several years, starting out as a rather rag-tag collection general purpose Ruby scripts, and has evolved into the latest release, version 2.5.0, which has reached a nice level of maturity --getting pretty close, I suppose one could say, to that stately realm of "enterprise-ready".</p>

<p>Every few weeks or so, I'll pick a library or particular extension and expound upon it. While the main intent of this series is to let others know what Facets makes available to them. I will also use it as a platform to further improve and polish Facets. So please, feel free to comment, make suggestions and point out alternatives, so that Facets might better serve the Ruby community in the future.

Okay, now to the meat of this edition...

I decided to start with something quite simple, but very useful, homogenizing hash keys. Currently in Ruby, this requires code like:</p>




     <p><a href="http://rubyworks.github.com2008-11-23-hash_rekey/index.html">Continue Reading...</a></p>
   </content>
 </entry>
 

</feed>



<br/><br/>

<div style="text-align: center;">
  <script type="text/javascript"><!--
  google_ad_client = "pub-1126154564663472";
  /* RUBYWORKS 09-10-02 728x90 */
  google_ad_slot = "0788888658";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div>

<br/><br/>

<div class="footer">
(c) 2002 Thomas Sawyer, All Rights Reserved. Special Thanks to Dieter Stein for the Ruby icon.
Graphic image is "Serpent" by Ruby Lee.
</div>

</body>

</div>
</html>